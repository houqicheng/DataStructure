using System;
using System.Collections;
using System.Windows.Forms;
using System.Drawing;
using System.Xml;

using NetFocus.DataStructure.TextEditor.Document;
using NetFocus.DataStructure.Services;
using NetFocus.DataStructure.Properties;
using NetFocus.DataStructure.Gui.Dialogs;
using NetFocus.DataStructure.Gui.OptionPanels.HighlightingEditor.Panels;

namespace NetFocus.DataStructure.Gui.OptionPanels.HighlightingEditor.Nodes
{

	public class SchemeNode : AbstractNode
	{
		string name;
		string[] extensions;
		
		public string[] Extensions 
		{
			get 
			{
				return extensions;
			} 
			set 
			{
				extensions = value;
			}
		}
		
		public string Name 
		{
			get 
			{
				return name;
			}
			set 
			{
				name = value;
			}
		}
		
		EnvironmentNode envNode;
		DigitsNode digitsNode;
		PropertiesNode propNode;
		RuleSetsNode rulesetsNode;
		
		string content;
		
		public string Content 
		{
			get 
			{
				return content;
			}
		}
		
		public SchemeNode(XmlElement el, bool readChildren)
		{
			content = el.OuterXml;
			
			name = el.Attributes["name"].InnerText;
			
			if (el.Attributes["extensions"] != null) 
			{
				extensions = el.Attributes["extensions"].InnerText.Split('|');
			}
			
			UpdateNodeText();

			OptionPanel = new SchemeOptionPanel(this);

			if (!readChildren) return;
			
			envNode = new EnvironmentNode(el["Environment"]);
			digitsNode = new DigitsNode(el["Digits"]);
			propNode = new PropertiesNode(el["Properties"]);
			rulesetsNode = new RuleSetsNode(el);
			
			Nodes.Add(envNode);
			Nodes.Add(digitsNode);
			Nodes.Add(propNode);
			Nodes.Add(rulesetsNode);
		}
		
		public override void UpdateNodeText()
		{
			Text = name;
		}
		
		public override string ToXml()
		{
			string str = 
				"<?xml version=\"1.0\"?>\n" + 
				"<!-- This file was autogenerated by the #Develop highlighting editor. -->\n\n" +
				"<SyntaxDefinition name=\"" + ReplaceXmlChars(name) + "\" extensions=\"" + String.Join("|", extensions) + "\">\n\n";
			
			str += envNode.ToXml();
			str += propNode.ToXml();
			str += digitsNode.ToXml();
			str += rulesetsNode.ToXml();

			str += 
				"</SyntaxDefinition>\n";
			
			return str;

		}
	}
	
}
